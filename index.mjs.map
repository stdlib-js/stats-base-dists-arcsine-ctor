{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar entropy = require( '@stdlib/stats-base-dists-arcsine-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-arcsine-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-arcsine-mean' );\nvar median = require( '@stdlib/stats-base-dists-arcsine-median' );\nvar mode = require( '@stdlib/stats-base-dists-arcsine-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-arcsine-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-arcsine-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-arcsine-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-arcsine-cdf' );\nvar logcdf = require( '@stdlib/stats-base-dists-arcsine-logcdf' );\nvar logpdf = require( '@stdlib/stats-base-dists-arcsine-logpdf' );\nvar pdf = require( '@stdlib/stats-base-dists-arcsine-pdf' );\nvar quantile = require( '@stdlib/stats-base-dists-arcsine-quantile' );\nvar format = require( '@stdlib/error-tools-fmtprodmsg' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction arcsineCDF( x ) {\n\treturn cdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction arcsineLogCDF( x ) {\n\treturn logcdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction arcsineLogPDF( x ) {\n\treturn logpdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction arcsinePDF( x ) {\n\treturn pdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction arcsineQuantile( p ) {\n\treturn quantile( p, this.a, this.b );\n}\n\n\n// MAIN //\n\n/**\n* Arcsine distribution constructor.\n*\n* @constructor\n* @param {number} [a=0.0] - minimum support\n* @param {number} [b=1.0] - maximum support\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {RangeError} `a` must be less than `b`\n* @returns {Arcsine} distribution instance\n*\n* @example\n* var arcsine = new Arcsine( 0.0, 1.0 );\n*\n* var y = arcsine.cdf( 0.8 );\n* // returns ~0.705\n*\n* var mu = arcsine.mean;\n* // returns 0.5\n*/\nfunction Arcsine() {\n\tvar a;\n\tvar b;\n\tif ( !(this instanceof Arcsine) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Arcsine();\n\t\t}\n\t\treturn new Arcsine( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Minimum support must be a number. Value: `%s`.', a ) );\n\t\t}\n\t\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Maximum support must be a number. Value: `%s`.', b ) );\n\t\t}\n\t\tif ( a >= b ) {\n\t\t\tthrow new RangeError( format( 'invalid arguments. Minimum support must be less than maximum support. Value: `(%f, %f)`.', a, b ) );\n\t\t}\n\t} else {\n\t\ta = 0.0;\n\t\tb = 1.0;\n\t}\n\tdefineProperty( this, 'a', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn a;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( value >= b ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be less than %f. Value: `%f`.', b, value ) );\n\t\t\t}\n\t\t\ta = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'b', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn b;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( value <= a ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be greater than %f. Value: `%f`.', a, value ) );\n\t\t\t}\n\t\t\tb = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Arcsine distribution differential entropy.\n*\n* @name entropy\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.entropy;\n* // returns ~1.838\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'entropy', function get() {\n\treturn entropy( this.a, this.b );\n});\n\n/**\n* Arcsine distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.kurtosis;\n* // returns -1.5\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.a, this.b );\n});\n\n/**\n* Arcsine distribution expected value.\n*\n* @name mean\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.mean;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'mean', function get() {\n\treturn mean( this.a, this.b );\n});\n\n/**\n* Arcsine distribution median.\n*\n* @name median\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.median;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'median', function get() {\n\treturn median( this.a, this.b );\n});\n\n/**\n* Arcsine distribution mode.\n*\n* @name mode\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'mode', function get() {\n\treturn mode( this.a, this.b );\n});\n\n/**\n* Arcsine distribution skewness.\n*\n* @name skewness\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'skewness', function get() {\n\treturn skewness( this.a, this.b );\n});\n\n/**\n* Arcsine distribution standard deviation.\n*\n* @name stdev\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.stdev;\n* // returns ~2.828\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'stdev', function get() {\n\treturn stdev( this.a, this.b );\n});\n\n/**\n* Arcsine distribution variance.\n*\n* @name variance\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.variance;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'variance', function get() {\n\treturn variance( this.a, this.b );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Arcsine.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var arcsine = new Arcsine( 2.0, 4.0 );\n*\n* var v = arcsine.cdf( 3.0 );\n* // returns ~0.5\n*/\nsetReadOnly( Arcsine.prototype, 'cdf', arcsineCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Arcsine.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var arcsine = new Arcsine( 2.0, 4.0 );\n*\n* var v = arcsine.logcdf( 3.0 );\n* // returns ~-0.693\n*/\nsetReadOnly( Arcsine.prototype, 'logcdf', arcsineLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Arcsine.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var arcsine = new Arcsine( 2.0, 4.0 );\n*\n* var v = arcsine.logpdf( 2.5 );\n* // returns ~-1.0\n*/\nsetReadOnly( Arcsine.prototype, 'logpdf', arcsineLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Arcsine.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var arcsine = new Arcsine( 2.0, 4.0 );\n*\n* var v = arcsine.pdf( 2.4 );\n* // returns ~0.398\n*/\nsetReadOnly( Arcsine.prototype, 'pdf', arcsinePDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Arcsine.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var arcsine = new Arcsine( 2.0, 4.0 );\n*\n* var v = arcsine.quantile( 0.5 );\n* // returns 3.0\n*/\nsetReadOnly( Arcsine.prototype, 'quantile', arcsineQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Arcsine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Arcsine distribution constructor.\n*\n* @module @stdlib/stats-base-dists-arcsine-ctor\n*\n* @example\n* var Arcsine = require( '@stdlib/stats-base-dists-arcsine-ctor' );\n*\n* var arcsine = new Arcsine( 0.0, 1.0 );\n*\n* var y = arcsine.cdf( 0.8 );\n* // returns ~0.705\n*\n* var mu = arcsine.mean;\n* // returns 0.5\n*/\n\n// MODULES //\n\nvar ctor = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n"],"names":["defineProperty","require$$0","setReadOnly","require$$1","setReadOnlyAccessor","require$$2","isNumber","require$$3","isPrimitive","isnan","require$$4","entropy","require$$5","kurtosis","require$$6","mean","require$$7","median","require$$8","mode","require$$9","skewness","require$$10","stdev","require$$11","variance","require$$12","cdf","require$$13","logcdf","require$$14","logpdf","require$$15","pdf","require$$16","quantile","require$$17","format","require$$18","Arcsine","a","b","this","arguments","length","TypeError","RangeError","configurable","enumerable","get","set","value","prototype","x","p","lib"],"mappings":"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"}